import falcon, json
from mintloan_utils import DB, generate, validate, utils, datetime, timedelta
from pypika import Query, Table, functions, JoinType, Order

class SearchUserResource:

    def on_get(self, req, resp):
        """Handles GET requests"""
        
        try:
            raw_json = req.stream.read()
        except Exception as ex:
            raise falcon.HTTPError(falcon.HTTP_400,'Error', ex.message) 

    def on_post(self, req, resp):
        """Handles POST requests"""
        output_dict = {"data":{"customerInfo":[],"page":{"startIndex":0, "size":0, "count":0}}, "msgHeader":{"authToken" : ""} }
        errors = utils.errors
        success = ""
        try:
            raw_json = req.stream.read()
            input_dict = json.loads(raw_json, encoding='utf-8')
	    #print input_dict
        except Exception as ex:
            raise #falcon.HTTPError(falcon.HTTP_400,'Invalid JSON', 'The JSON was incorrect.')
        try:
            if not validate.Request(api='searchUser', request=input_dict):
                output_dict["data"].update({"error":1, "message":errors["json"]})
                resp.body = json.dumps(output_dict)
            else:
                db = DB(input_dict["msgHeader"]["authLoginID"])
                val_error = validate(db).basicChecks(token=input_dict["msgHeader"]["authToken"], loginID = input_dict["msgHeader"]["authLoginID"], 
                                                     checkLogin=True)
                if val_error:
                    output_dict["data"].update({"error":1, "message":val_error})
                    resp.body = json.dumps(output_dict)
                else:
                    page = input_dict["data"]['page']
                    custcred = Table("mw_customer_login_credentials", schema="mint_loan")
		    income = Table("mw_driver_income_data_new", schema="mint_loan")
                    clientmaster = Table("mw_finflux_client_master", schema="mint_loan")
                    pan = Table("mw_pan_status", schema="mint_loan")
                    profile = Table("mw_client_profile", schema="mint_loan")
                    log = Table("mw_customer_change_log", schema="mint_loan")
                    kyc = Table("mw_aadhar_kyc_details", schema="mint_loan")
                    kycdocs = Table("mw_cust_kyc_documents", schema="mint_loan")
                    loanmaster = Table("mw_client_loan_master", schema="mint_loan")
                    lnlmt = Table("mw_client_loan_limit", schema="mint_loan")
                    emis = Table("mw_client_loan_emi_details", schema="mint_loan")
                    cdata = Table("mw_customer_data", schema="mint_loan")
                    calldata = Table("mw_call_data", schema="mint_loan")
                    log = Table("mw_customer_change_log", schema="mint_loan")
                    repay = Table("mw_loan_repayment_data", schema="mint_loan")
                    join = Query.from_(custcred).join(lnlmt, how=JoinType.left).on_field("CUSTOMER_ID").join(kyc, how=JoinType.left)
                    join = join.on_field("CUSTOMER_ID").join(profile, how=JoinType.left).on_field("CUSTOMER_ID")
                    q = join.select(custcred.CUSTOMER_ID,custcred.LOGIN_ID,custcred.ACCOUNT_STATUS, custcred.LAST_LOGIN, custcred.COMMENTS,
                                    custcred.REGISTERED_IP_ADDRESS,custcred.LAST_LOGGED_IN_IP_ADDRESS,custcred.DEVICE_ID, custcred.CHEQUES,
                                    custcred.CREATED_DATE, custcred.STAGE, kyc.NAME, profile.COMPANY_NAME, lnlmt.LOAN_LIMIT, profile.NUMBER_COMMENT,
                                    profile.name.as_("PROFILE_NAME"), profile.NAME_VERIFIED, profile.NAME_COMMENT, profile.NUMBER_VERIFIED, profile.NUMBER_COMMENT)
                    q1 = join.select(functions.Count(custcred.CUSTOMER_ID).as_("count"))
                    indict = input_dict['data']
                    if "priority" in indict.keys():
                        if indict["priority"]=="firstPriority":
                            days_7 = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
			    q3 = Query.from_(log).select(log.CUSTOMER_ID, functions.Max(log.CREATED_DATE).as_("maxdate")).groupby(log.CUSTOMER_ID)
                    	    q2 = Query.from_(log).join(q3).on_field("CUSTOMER_ID").select(log.star).where(log.CREATED_DATE==q3.maxdate)
                    	    q4 = Query.from_(kycdocs).join(q2, how=JoinType.left).on_field("CUSTOMER_ID")
                            q4 = q4.select("CUSTOMER_ID").distinct().where((kycdocs.CREATED_DATE>days_7) & (kycdocs.DOCUMENT_TYPE_ID.notin(["114","115"])) &
                                                                           (kycdocs.VERIFICATION_STATUS.isnull()) &
									   (((q2.CREATED_DATE.isnull()) | (kycdocs.CREATED_DATE>q2.CREATED_DATE))))
                            Q1 = Query.from_(income).select("CUSTOMER_ID").distinct().where(income.CUSTOMER_ID.isin(q4))
                        elif indict["priority"]=="secondPriority":
                            Q1 = Query.from_(profile).select("CUSTOMER_ID").where((profile.NAME_VERIFIED=='P') | (profile.NUMBER_VERIFIED=='P'))
                        elif indict["priority"]=="thirdPriority":
                            stages = ["GOOD_TO_LEND", "READY_TO_LEND", "LOAN_IN_PROCESS", "CUSTOMER", "REJECTED", "LOW_INCOME", "AWAITING_DOCS", "AWAITING_INFO", "AWAITING_AGREEMENT", "REVIEW_LATER"]
                            q2 = Query.from_(custcred).select("CUSTOMER_ID").where(custcred.STAGE.isin(["AWAITING_VERIFICATION","AWAITING_UBER_DATA", "AWAITING_AGREEMENT"]))
                            Q1 = Query.from_(profile).select("CUSTOMER_ID").where((profile.NAME_VERIFIED=='1') & (profile.NUMBER_VERIFIED=='1') &
                                                                                  (profile.CUSTOMER_ID.isin(q2)))
                        elif indict["priority"]=="fourthPriority":
                            Q1 = Query.from_(kycdocs).select("CUSTOMER_ID").where((kycdocs.DOCUMENT_TYPE_ID=='113') &
                                                                                  (kycdocs.VERIFICATION_STATUS.isnull()))
                        elif indict["priority"]=="fifthPriority":
                            max_week = db.runQuery(Query.from_(income).select(functions.Max(income.WEEK).as_("mweek")))["data"][0]["mweek"]
                            q2 = Query.from_(income).select(income.CUSTOMER_ID).distinct().where(income.WEEK==max_week)
                            days_7 = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
                            Q1 = Query.from_(log).select("CUSTOMER_ID").where(log.DATA_VALUE=='LOW_INCOME').where(log.CUSTOMER_ID.isin(q2))
                            Q1 = Q1.where(((log.RETAINED_DATE<days_7) | (log.RETAINED_DATE.isnull())) & (log.CREATED_DATE<days_7)).groupby(log.CUSTOMER_ID)
                        elif indict["priority"] in ("firstPriorityOutcall", "fourthPriorityOutcall"):
                            today = datetime.now().strftime("%Y-%m-%d 00:00:00")
                            cities = {"BAN":['Bangalore rural', 'bangalore kasavanalli', 'Bangalore', 'banglore', 'BAN', 'bangaloor', 'Bangalore ',
                                             'Bamgalore'], "PUNE":['PUNE', 'punr'], "CHENNAI":["Chennai"]}
                            clback=Query.from_(calldata).select("CUSTOMER_ID").where((calldata.CREATED_DATE>today) |
                                                                                     (calldata.CALLBACK_DATETIME>today))
                            if "city" in input_dict["data"]:
                                q = q.where(profile.CUSTOMER_ID.notin(clback))
                                q1 = q1.where(profile.CUSTOMER_ID.notin(clback))
                                if input_dict["data"]["city"] in ("BAN", "PUNE", "CHENNAI"):
                                    #Q = Query.from_(profile).select("CUSTOMER_ID").where(profile.CUSTOMER_ID.notin(clback))
                                    #Q = Q.where(profile.CURRENT_CITY.isin(cities[input_dict["data"]["city"]]))
				    q = q.where(profile.CURRENT_CITY.isin(cities[input_dict["data"]["city"]]))
                                    q1 = q1.where(profile.CURRENT_CITY.isin(cities[input_dict["data"]["city"]]))
                                elif input_dict["data"]["city"]=="MUM":
                                    #Q = Query.from_(profile).select("CUSTOMER_ID").where(profile.CURRENT_CITY.notin(sum(cities.values(), [])))
                                    #Q = Q.where(profile.CUSTOMER_ID.notin(clback))
				    q = q.where(profile.CURRENT_CITY.notin(sum(cities.values(), [])))
                                    q1 = q1.where(profile.CURRENT_CITY.notin(sum(cities.values(), [])))
                                #else:
                                    #Q = Query.from_(profile).select("CUSTOMER_ID").distinct().where(profile.CUSTOMER_ID.notin(clback))
                            #else:
                                #Q = Query.from_(profile).select("CUSTOMER_ID").distinct().where(profile.CUSTOMER_ID.notin(clback))
                            days_2 = (datetime.now() - timedelta(days=2)).strftime("%Y-%m-%d 00:00:00")
                            Q1 = Query.from_(kycdocs).select("CUSTOMER_ID").distinct().where((kycdocs.CREATED_DATE>days_2) &
                                                                                             #(kycdocs.CUSTOMER_ID.isin(Q)) &
                                                                                             (kycdocs.VERIFICATION_STATUS.isnull()))
			    #print db.pikastr(Q1)
                        elif indict["priority"]=="secondPriorityOutcall":
                            days_7 = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d 00:00:00")
                            Q1 = Query.from_(emis).select(emis.CUSTOMER_ID).distinct().where((emis.DUE_DATE<days_7) & (emis.OVERDUE_AMOUNT>0))
                        q = (q.where(custcred.CUSTOMER_ID.isin(Q1)) if indict["priority"] in ["secondPriority", "fourthPriority"]
                             else q.where((custcred.CUSTOMER_ID.isin(Q1)) & (custcred.STAGE=="AWAITING_ADDITIONAL_DOCS"))
                             if indict["priority"]=="firstPriority"
                             else q.where((custcred.CUSTOMER_ID.isin(Q1)) & (custcred.STAGE.isin(["AWAITING_UBER_DATA", "AWAITING_VERIFICATION"])))
                             if indict["priority"]=="thirdPriority" 
                             else q.where((custcred.CUSTOMER_ID.isin(Q1)) & (custcred.STAGE=='LOW_INCOME')) if indict["priority"]=="fifthPriority"
                             else q.where((custcred.CUSTOMER_ID.notin(Q1)) & (custcred.STAGE=="AWAITING_ADDITIONAL_DOCS"))
                             if indict["priority"]=="firstPriorityOutcall" else q.where(custcred.STAGE=="AWAITING_LOAN_APPLICATION")
                             if indict["priority"]=="fourthPriorityOutcall" else q)
		        #print indict["priority"]=="firstPriorityOutcall", db.pikastr(q)
                        q1=(q1.where(custcred.CUSTOMER_ID.isin(Q1)) if indict["priority"] in ["secondPriority", "fourthPriority"]
                            else q1.where((custcred.CUSTOMER_ID.isin(Q1)) & (custcred.STAGE=="AWAITING_ADDITIONAL_DOCS"))
                            if indict["priority"]=="firstPriority"
                            else q1.where((custcred.CUSTOMER_ID.isin(Q1)) & (custcred.STAGE.isin(["AWAITING_UBER_DATA", "AWAITING_VERIFICATION"])))
                            if indict["priority"]=="thirdPriority" 
                            else q1.where((custcred.CUSTOMER_ID.isin(Q1)) & (custcred.STAGE=='LOW_INCOME')) if indict["priority"]=="fifthPriority"
                            else q1.where((custcred.CUSTOMER_ID.notin(Q1)) & (custcred.STAGE=="AWAITING_ADDITIONAL_DOCS"))
                            if indict["priority"]=="firstPriorityOutcall" else q1.where(custcred.STAGE=="AWAITING_LOAN_APPLICATION")
                            if indict["priority"]=="fourthPriorityOutcall" else q1)
                    if indict["accountStatus"]!="":
                        q = q.where(custcred.ACCOUNT_STATUS==indict["accountStatus"])
                        q1 = q1.where(custcred.ACCOUNT_STATUS==indict["accountStatus"])
                    if (indict["uberAgreement"] if "uberAgreement" in indict.keys() else False):
                        Q = Query.from_(kycdocs).select("CUSTOMER_ID").distinct().where(kycdocs.DOCUMENT_TYPE_ID=="113")
                        q = q.where(custcred.CUSTOMER_ID.isin(Q))
                    if indict["searchBy"]=="listCustomers":
                        q = q.where(custcred.STAGE!='REJECTED')
                        q1 = q1.where(custcred.STAGE!='REJECTED')
                        if indict["days"]>0:
                            q = q.where(custcred.CREATED_DATE>=(datetime.now() - timedelta(days=indict["days"]-1)).strftime("%Y-%m-%d"))
                            q1 = q1.where(custcred.CREATED_DATE>=(datetime.now() - timedelta(days=indict["days"]-1)).strftime("%Y-%m-%d"))
                    elif indict["searchBy"] in ["name", "loginID", "email", "pan", "aadhar", "customerID", "stage", "company"]:
                        if indict["searchBy"]=="stage":
                            q = q.where(custcred.STAGE==indict["searchText"])
                            q1 = q1.where(custcred.STAGE==indict["searchText"])
                        if indict["searchBy"]=="company":
                            q = q.where(profile.COMPANY_NAME==indict["searchText"])
                            q1 = q1.where(profile.COMPANY_NAME==indict["searchText"])
                        if indict["searchBy"]=='loginID':
                            #qq = Query.from_(cdata).select(cdata.CUSTOMER_ID).distinct().where((cdata.DATA_KEY=="COMPANY_NUMBER") & (cdata.DATA_VALUE.like("%" + indict["searchText"] + "%")))
                            q = q.where((custcred.LOGIN_ID.like("%" + indict["searchText"] + "%")).__or__(profile.COMPANY_NUMBER.like("%" + indict["searchText"] + "%")))#.__or__(custcred.CUSTOMER_ID.isin(qq)))
                            q1 = q1.where((custcred.LOGIN_ID.like("%" + indict["searchText"] + "%")).__or__(profile.COMPANY_NUMBER.like("%" + indict["searchText"] + "%")))#.__or__(custcred.CUSTOMER_ID.isin(qq)))
                        if indict["searchBy"]=='customerID':
                            q = q.where(custcred.CUSTOMER_ID==indict["searchText"])#customerID"])
                            q1 = q1.where(custcred.CUSTOMER_ID==indict["searchText"])#customerID"])
                        if indict["searchBy"]=='name':
                            q = q.where((kyc.NAME.like("%" + indict["searchText"] + "%")).__or__(profile.NAME.like("%" + indict["searchText"] + "%"))) 
                    elif indict["searchBy"]=="date":
                        q = q.where(custcred.CREATED_DATE>=indict["fromDate"])
                        q = q.where(custcred.CREATED_DATE<=indict["toDate"])
                        q1 = q1.where(custcred.CREATED_DATE>=indict["fromDate"])
                        q1 = q1.where(custcred.CREATED_DATE<=indict["toDate"])
                    elif indict["searchBy"]=="listClients":
                        q = q.where(clientmaster.CUSTOMER_ID.notnull())
                        q1 = q1.where(clientmaster.CUSTOMER_ID.notnull())
                    elif indict["searchBy"] in ("listLoanApplied", "listLoanPending", "listLoanRequested"):
                        q = Query.from_(loanmaster).join(custcred).on_field("CUSTOMER_ID").join(lnlmt, how=JoinType.left).on_field("CUSTOMER_ID")
                        join = q.join(kyc, how=JoinType.left).on_field("CUSTOMER_ID").join(profile, how=JoinType.left).on_field("CUSTOMER_ID")
                        status = ('ACTIVE' if indict["searchBy"]=="listLoanApplied" else "PENDING" if indict["searchBy"]=="listLoanPending" 
                                  else "REQUESTED")
                        q = join.select(custcred.CUSTOMER_ID,custcred.LOGIN_ID,custcred.ACCOUNT_STATUS, custcred.LAST_LOGIN, lnlmt.LOAN_LIMIT,
                                        custcred.REGISTERED_IP_ADDRESS,custcred.LAST_LOGGED_IN_IP_ADDRESS,custcred.DEVICE_ID,
                                        loanmaster.CREATED_DATE, custcred.STAGE, profile.name.as_("PROFILE_NAME")).where(loanmaster.STATUS==status)
                        if indict["searchText"]!="":
                            q = q.where(profile.COMPANY_NAME==indict["searchText"])
                        q1 = join.select(functions.Count(custcred.CUSTOMER_ID).as_("count").distinct()).where(loanmaster.STATUS==status)
                        if indict["searchText"]!="":
                            q1 = q1.where(profile.COMPANY_NAME==indict["searchText"])
                        if indict["accountStatus"]!="":
                            q = q.where(custcred.ACCOUNT_STATUS==indict["accountStatus"])
                            q1 = q1.where(custcred.ACCOUNT_STATUS==indict["accountStatus"])
                    if (indict["numberVerified"] in ("1", "0", "P") if "numberVerified" in indict else False):
                        q = q.where(profile.NUMBER_VERIFIED==indict["numberVerified"])
                        q1 = q1.where(profile.NUMBER_VERIFIED==indict["numberVerified"])
                    if (indict["numberVerified"]=="NULL" if "numberVerified" in indict else False):
                        q = q.where(profile.NUMBER_VERIFIED.isnull())
                        q1 = q1.where(profile.NUMBER_VERIFIED.isnull())
                    if (indict["nameVerified"] in ("1", "0", "P") if "nameVerified" in indict else False):
                        q = q.where(profile.NAME_VERIFIED==indict["nameVerified"])
                        q1 = q1.where(profile.NAME_VERIFIED==indict["nameVerified"])
                    if (indict["nameVerified"]=="NULL" if "nameVerified" in indict else False):
                        q = q.where(profile.NAME_VERIFIED.isnull())
                        q1 = q1.where(profile.NAME_VERIFIED.isnull())
                    if indict["searchBy"] not in ["listLoanApplied", "listClients", "listLoanPending", "listLoanRequested"]:
                        if "orderby" in indict.keys() and "order" in indict.keys():
                            orderPref = Order.asc if indict["order"]=="asc" else Order.desc
                            if indict["orderby"]=="stage":
                                q = q.orderby(custcred.STAGE,order=orderPref).limit("%i,%i"%(page["startIndex"], page["size"]))
                            elif indict["orderby"]=="customerID":
                                q = q.orderby(custcred.CUSTOMER_ID,order=orderPref).limit("%i,%i"%(page["startIndex"], page["size"]))
                            elif indict["orderby"]=="name":
                                q = q.orderby(kyc.NAME,order=orderPref).limit("%i,%i"%(page["startIndex"], page["size"]))
                            elif indict["orderby"]=="loginID":
                                q = q.orderby(custcred.LOGIN_ID,order=orderPref).limit("%i,%i"%(page["startIndex"], page["size"]))
                            elif indict["orderby"]=="clientID":
                                q = q.orderby(clientmaster.CLIENT_ID,order=orderPref).limit("%i,%i"%(page["startIndex"], page["size"]))
                            elif indict["orderby"]=="createdDate":
                                q = q.orderby(custcred.CREATED_DATE,order=orderPref).limit("%i,%i"%(page["startIndex"], page["size"]))
                            Fields = db.runQuery(q)
			    #print db.pikastr(q)
                        else:
                            Fields = db.runQuery(q.orderby(custcred.CUSTOMER_ID,order=Order.desc).limit("%i,%i"%(page["startIndex"], page["size"])))
			    #print db.pikastr(q.orderby(custcred.CUSTOMER_ID, order=Order.desc))
                    else:
                        Fields=(q.orderby(loanmaster.CREATED_DATE,order=Order.desc) if indict["searchBy"] in ('listLoanApplied', 'listLoanPending', 'listLoanRequested')
                                else q.orderby(custcred.CUSTOMER_ID,order=Order.desc))
                        Fields = db.runQuery(Fields.groupby(custcred.CUSTOMER_ID).limit("%i,%i"%(page["startIndex"], page["size"])))
		    	#print db.pikastr(q.orderby(loanmaster.CREATED_DATE,order=Order.desc) if indict["searchBy"] in ('listLoanApplied', 'listLoanPending') else q.orderby(custcred.CUSTOMER_ID,order=Order.desc)), Fields
                    for datum in Fields["data"]:
                        client = Query.from_(clientmaster).select(clientmaster.CLIENT_ID, clientmaster.FULL_NAME.as_("CLIENT_FULL_NAME"),
                                                                  clientmaster.ACTIVATION_DATE)
                        client = client.where(clientmaster.CUSOTMER_ID==datum["CUSTOMER_ID"]).orderby(clientmaster.AUTO_ID, order=Order.desc)
                        client = db.runQuery(client.limit(1))["data"]
                        loanStatus = Query.from_(loanmaster).select("STATUS", "AMOUNT", "LOAN_REFERENCE_ID").where(loanmaster.CUSTOMER_ID==datum["CUSTOMER_ID"])
                        loanStatus = db.runQuery(loanStatus.orderby(loanmaster.CREATED_DATE, order=Order.desc).limit(1))["data"]
                        d = db.runQuery(Query.from_(repay).select(repay.star).where((repay.LOAN_REF_ID==(loanStatus[0]["LOAN_REFERENCE_ID"] if loanStatus else "0")) &
                                                                                    (repay.FINFLUX_TRAN_ID.isnull())))["data"]
                        dates = [(ele["REPAY_DATETIME"], ele["REPAY_AMOUNT"]) for ele in d]
                        temp_7 = sum(ele[1] for ele in dates if ele[0] > int((datetime.now() - timedelta(days=7)).strftime("%s")))
			#print (temp_7, datum) if temp_7>0 else None
                        docUpload = Query.from_(kycdocs).select("CREATED_DATE").where(kycdocs.CUSTOMER_ID==datum["CUSTOMER_ID"])
                        docUpload = db.runQuery(docUpload.orderby(kycdocs.CREATED_DATE, order=Order.desc).limit(1))["data"]
                        #custPan = Query.from_(pan).select("PAN_NO").where(pan.CUSTOMER_ID==datum["CUSTOMER_ID"])
                        panNo = None#db.runQuery(custPan.orderby(pan.CREATED_DATE, order=Order.desc).limit(1))["data"]
                        datum.update({"PAN_NO": panNo[0]["PAN_NO"] if panNo else "", "LOAN_STATUS": loanStatus[0]["STATUS"] if loanStatus else "", 
                                      "LOAN_AMOUNT": loanStatus[0]["AMOUNT"] if loanStatus else "", "TEMPORARY_PAYMENT":temp_7,
                                      "DOC_UPLOAD": docUpload[0]["CREATED_DATE"] if docUpload else ""})
                        datum.update(client[0] if client else {})
                    if indict["orderby"]=="loanStatus" if "orderby" in indict.keys() else False:
                        Fields["data"] = sorted(Fields["data"], key=lambda x:x["LOAN_STATUS"], reverse=False if indict["order"]=="asc" else True)
                    temp = db.runQuery(q1)["data"]
                    Fields.update(temp[0] if temp else {})
                    if (not Fields["error"]):
                        token = generate(db).AuthToken() #if input_dict["msgHeader"]["authLoginID"]!="dharam@mintwalk.com" else {"updated":True, "token":"scGEx8.gYYwXlGxTGiIMZO2OJ7qdIcuZy0vUA4sPsFc.!rxNMy4BkRT/P6pxWvjP2G6iDwIFukf+o"}
                        if token["updated"]:
                            if  Fields["data"]!=[]:
                                output_dict["data"].update({"customerInfo": utils.camelCase(Fields["data"])})
                                output_dict["data"]["page"] = input_dict["data"]["page"]
                                output_dict["data"]["page"].update({"count": Fields["count"]})
                                output_dict["data"].update({"error":0, "message":success})
                                output_dict["msgHeader"]["authToken"] = token["token"]
                            else:
                                output_dict["msgHeader"]["authToken"] = token["token"]
                                output_dict["data"].update({"error":0, "message":"Results not found"})
                        else:
                            output_dict["data"].update({"error":1, "message":errors["token"]})
                    else:
                        output_dict["data"].update({"error":1, "message":errors["query"]})
                resp.body = json.dumps(output_dict, encoding='unicode-escape')
		#print output_dict["msgHeader"]
                db._DbClose_()
        except Exception as ex:
            raise #falcon.HTTPError(falcon.HTTP_400,'Invalid JSON', 'The JSON was incorrect.')



app = falcon.API()
searchUser = SearchUserResource()

app.add_route('/searchUser', searchUser)
        




