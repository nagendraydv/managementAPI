import falcon, json
from mintloan_utils import DB, generate, validate, datetime, timedelta, utils
from pypika import Query, Table, functions, Order, JoinType

class CustDetailsResource:

    def on_get(self, req, resp):
        """Handles GET requests"""
        
        try:
            raw_json = req.stream.read()
        except Exception as ex:
            raise falcon.HTTPError(falcon.HTTP_400,'Error', ex.message) 

    def on_post(self, req, resp):
        """Handles POST requests"""
        output_dict = {"msgHeader":{"authToken" : ""},"data":{"custCredentials":{}, "custPanNumber":"", "custAadharNumber":"", "custDetails":{},
                                                              "custKycDetails":{}, "loanLimit":"", "loanLimitComments":"", "clientDetails":{},
                                                              "companyNumbers":[]}}
        errors = utils.errors
        success = ""
        logInfo = {'api': 'customerDetails'}
        try:
            raw_json = req.stream.read()
            input_dict = json.loads(raw_json, encoding='utf-8')
            utils.logger.debug("Request: " + json.dumps(input_dict), extra=logInfo)
        except Exception as ex:
            raise falcon.HTTPError(falcon.HTTP_400,'Invalid JSON', 'The JSON was incorrect.')
        try:
            if not validate.Request(api='custDetails', request=input_dict):
                output_dict["data"].update({"error":1, "message":errors["json"]})
                resp.body = json.dumps(output_dict)
            else:
                db = DB(input_dict["msgHeader"]["authLoginID"])#, filename='mysql-slave.config')
                dbw = DB(input_dict["msgHeader"]["authLoginID"])
                val_error = validate(db).basicChecks(token=input_dict["msgHeader"]["authToken"])
                if val_error:
                    output_dict["data"].update({"error":1, "message":val_error})
                    resp.body = json.dumps(output_dict)
                else:
                    custID = input_dict["data"]["customerID"]
                    custcred = Table("mw_customer_login_credentials", schema="mint_loan")
                    clientmaster = Table("mw_finflux_client_master", schema="mint_loan")
                    custkyc = Table("mw_aadhar_kyc_details", schema="mint_loan")
                    aadhar = Table("mw_aadhar_status", schema="mint_loan")
                    profile = Table("mw_client_profile", schema="mint_loan")
                    loanlimit = Table("mw_client_loan_limit", schema="mint_loan")
                    clientmaster = Table("mw_finflux_client_master", schema="mint_loan")
                    pan = Table("mw_pan_status", schema="mint_loan")
                    income = Table("mw_driver_income_data_new", schema="mint_loan")
                    income2 = Table("mw_driver_income_data", schema="mint_loan")
                    doc = Table("mw_cust_kyc_documents", schema="mint_loan")
                    custdata = Table("mw_customer_data", schema="mint_loan")
                    q = Query.from_(custdata).select(custdata.DATA_VALUE.as_("companyNumber")).where(custdata.CUSTOMER_ID==custID)
                    compNo = db.runQuery(q.where(custdata.DATA_KEY=="COMPANY_NUMBER").orderby(custdata.ID, order=Order.desc))
                    clientIDs = db.runQuery(Query.from_(clientmaster).select(clientmaster.star).where(clientmaster.CUSTOMER_ID==custID))
                    clientDetails = []
                    for lender in ["CHAITANYA", "GETCLARITY"]:
                        temp = filter(lambda x:x["LENDER"]==lender, clientIDs["data"])
                        clientDetails.append({"LENDER_NAME":lender, "CLIENT_ID": temp[0]["CLIENT_ID"] if temp else ""})
                    custCredentials = db.runQuery(Query.from_(custcred).select("LOGIN_ID", "ACCOUNT_STATUS", "LAST_LOGIN", "CUSTOMER_ID", "STAGE",
                                                                               "REGISTERED_IP_ADDRESS", "LAST_LOGGED_IN_IP_ADDRESS", "COMMENTS",
                                                                               "DEVICE_ID", "CREATED_DATE", "REJECTED",
                                                                               "REJECTION_REASON").where(custcred.CUSTOMER_ID==custID))
                    custDetails = db.runQuery(Query.from_(profile).select(profile.star).where(profile.CUSTOMER_ID==custID))
                    custKycDetails = db.runQuery(Query.from_(custkyc).select(custkyc.star).where(custkyc.CUSTOMER_ID==custID))
                    custKycDocs = db.runQuery(Query.from_(doc).select(doc.star).where((doc.CUSTOMER_ID==custID) &
                                                                                      (doc.DOCUMENT_TYPE_ID.isin(['108', '101', '116']))))
                    for datum in custKycDocs["data"]:
                                datum["DOCUMENT_URL"] = datum["DOCUMENT_URL"].split("/")[-1]
                    custAadharNo = Query.from_(aadhar).select("AADHAR_NO").where((aadhar.CUSTOMER_ID==custID) & (aadhar.ARCHIVED=='N'))
                    custAadharNo = db.runQuery(custAadharNo.orderby(aadhar.CREATED_DATE, order=Order.desc).limit(1))
                    custPan = Query.from_(pan).select("PAN_NO").where(pan.CUSTOMER_ID==custID).orderby(pan.CREATED_DATE, order=Order.desc)
                    custPan = db.runQuery(custPan.limit(1))
                    loanLimit = db.runQuery(Query.from_(loanlimit).select("LOAN_LIMIT", "COMMENTS").where((loanlimit.CUSTOMER_ID==custID) & 
                                                                                                          (loanlimit.ARCHIVED=='N')))
                    q = Query.from_(income).select(income.star).where(income.CUSTOMER_ID==custID).orderby(income.WEEK, order=Order.desc).limit(1)
                    income = db.runQuery(q)
                    if not income["data"]:
                        q = Query.from_(income2).select(income2.star).where(income2.CUSTOMER_ID==custID).orderby(income2.WEEK, order=Order.desc)
                        income = db.runQuery(q.limit(1))
                    if (custCredentials["data"]):
                        token = generate(dbw).AuthToken()
                        if token["updated"]:
                            output_dict["data"]["companyNumbers"] = [ele["companyNumber"] for ele in compNo["data"]]
                            output_dict["data"]["incomeData"] = utils.camelCase(income["data"])
                            output_dict["data"]["clientDetails"] = utils.camelCase(clientDetails)
                            output_dict["data"]["custCredentials"] = utils.camelCase(custCredentials["data"][0]) 
                            output_dict["data"]["custDetails"] = utils.camelCase(custDetails["data"][0]) if custDetails["data"] else []
                            output_dict["data"]["custKycDetails"] = utils.camelCase(custKycDetails["data"][0]) if custKycDetails["data"] else []
                            output_dict["data"]["custKycDocs"] = utils.camelCase(custKycDocs["data"])
                            output_dict["data"]["custAadharNumber"] = custAadharNo["data"][0]["AADHAR_NO"] if custAadharNo["data"] else ""
                            output_dict["data"]["custPanNumber"] = custPan["data"][0]["PAN_NO"] if custPan["data"] else ""
                            if loanLimit["data"]:
                                output_dict["data"]["loanLimit"] = loanLimit["data"][0]["LOAN_LIMIT"] if loanLimit["data"][0]["LOAN_LIMIT"] else "0"
                                output_dict["data"]["loanLimitComments"] = (loanLimit["data"][0]["COMMENTS"] if loanLimit["data"][0]["COMMENTS"]
                                                                            else "")
                            else:
                                output_dict["data"]["loanLimit"], output_dict["data"]["loanLimitComments"] = ("", "")
                            output_dict["data"].update({"error": 0, "message": success})
                            output_dict["msgHeader"]["authToken"] = token["token"]
                        else:
                            output_dict["data"].update({"error":1, "message":errors["token"]})
                    else:
                        output_dict["data"].update({"error":1, "message":errors["query"]}) 
                resp.body = json.dumps(output_dict, encoding='unicode-escape')
                utils.logger.debug("Response: " + json.dumps(output_dict["msgHeader"]) + "\n", extra=logInfo)
                db._DbClose_()
        except Exception as ex:
            utils.logger.error("ExecutionError: ", extra=logInfo, exc_info=True)
            raise #falcon.HTTPError(falcon.HTTP_400,'Invalid JSON', 'The JSON was incorrect.')

