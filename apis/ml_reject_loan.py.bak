import falcon, json, requests
from mintloan_utils import DB, generate, validate, utils, datetime, timedelta
from pypika import Query, Table, Order, JoinType

class RejectLoanResource:

    def on_get(self, req, resp):
        """Handles GET requests"""
        
        try:
            raw_json = req.stream.read()
        except Exception as ex:
            raise falcon.HTTPError(falcon.HTTP_400,'Error', ex.message) 

    def on_post(self, req, resp):
        """Handles POST requests"""
        output_dict = {"msgHeader":{"authToken" : ""},"data":{"docdetails":[]}}
        errors = utils.errors
        success = "data loaded successfully"
        try:
            raw_json = req.stream.read()
            input_dict = json.loads(raw_json, encoding='utf-8')
	    print input_dict
        except:# Exception as ex:
            raise #falcon.HTTPError(falcon.HTTP_400,'Invalid JSON', 'The JSON was incorrect.')
        try:
            if False:#not validate.Request(api='', request=input_dict):
                output_dict["data"].update({"error":1, "message":errors["json"]})
                resp.body = json.dumps(output_dict)
            else:
                db = DB(input_dict["msgHeader"]["authLoginID"])       
                val_error = validate(db).basicChecks(token=input_dict["msgHeader"]["authToken"])
                if val_error:
                    output_dict["data"].update({"error":1, "message":val_error})
                    resp.body = json.dumps(output_dict)
                else:
		    lmd=input_dict["data"]["loanRefID"]
		    print lmd
                    lm = Table("mw_client_loan_master", schema="mint_loan")
                    conf = Table("mw_configuration", schema="mint_loan_admin")
                    conf2 = Table("mw_configuration", schema="mint_loan")
                    baseurl = db.runQuery(Query.from_(conf).select("CONFIG_VALUE").where(conf.CONFIG_KEY=="FINFLUX_URL"))
                    baseurl = baseurl["data"][0]["CONFIG_VALUE"]
                    params = Query.from_(conf2).select("CONFIG_KEY", "CONFIG_VALUE").where(conf2.CONFIG_KEY.isin(["FinfluxAccessToken"]))
                    exist = db.runQuery(Query.from_(lm).select("*").where(lm.LOAN_REFERENCE_ID==str(input_dict["data"]["loanRefID"])))["data"]
		    #print exist
                    if exist:
                        params = {ele["CONFIG_KEY"]:ele["CONFIG_VALUE"] for ele in db.runQuery(params)["data"]}
                        headers = utils.mergeDicts(utils.finflux_headers, {"Authorization":"bearer " + params["FinfluxAccessToken"]})
                        r = requests.put(baseurl + "loanapplicationreferences/" + str(input_dict["data"]["loanRefID"]) + "?command=reject",
                                         headers=headers, verify=False)
			#print r 
			#print r.json()
                        if r.status_code==200:
                            updated = db.Update(db="mint_loan", table="mw_client_loan_master", checkAll=False,
                                                conditions={"ID = ":str(exist[0]["ID"])}, STATUS="ML_REJECTED")
                        if updated:
                            token = generate(db).AuthToken()
                            if token["updated"]:
                                output_dict["data"].update({"error": 0, "message": success})
                                output_dict["msgHeader"]["authToken"] = token["token"]
                            else:
                                output_dict["data"].update({"error":1, "message":errors["token"]})
                        else:
                            input_dict["data"].update({"error":1, "message": "Something went wrong"})
                    else:
                        input_dict["data"].update({"error":1, "message":"could not find data to update"})
                resp.body = json.dumps(output_dict)
                db._DbClose_()
        except Exception as ex:
            raise falcon.HTTPError(falcon.HTTP_400,'Invalid JSON', 'The JSON was incorrect.')

        




