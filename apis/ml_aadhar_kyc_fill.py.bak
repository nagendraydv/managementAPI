import falcon, json, random, requests
from mintloan_utils import DB, generate, validate, utils, datetime
from pypika import Query, Table, JoinType, Order, functions

class AadharFillResource:

    def on_get(self, req, resp):
        """Handles GET requests"""
        
        try:
            raw_json = req.stream.read()
        except Exception as ex:
            raise falcon.HTTPError(falcon.HTTP_400,'Error', ex.message) 

    def on_post(self, req, resp):
        """Handles POST requests"""
        output_dict = {"data":{}, "msgHeader":{"authToken" : ""} }
        errors = utils.errors
        success = "Inserted the details successfully"
        logInfo = {'api': 'aadharFill'}
        try:
            raw_json = req.stream.read()
            input_dict = json.loads(raw_json, encoding='utf-8')
            utils.logger.debug("Request: " + json.dumps(input_dict), extra=logInfo)
	    #print input_dict
        except Exception as ex:
            raise falcon.HTTPError(falcon.HTTP_400,'Invalid JSON', 'The JSON was incorrect.')
        try:
            if not validate.Request(api='aadharFill', request=input_dict):
                output_dict["data"].update({"error":1, "message":errors["json"]})
                resp.body = json.dumps(output_dict)
            else:
                db = DB(id=input_dict["msgHeader"]["authLoginID"]) # setting an instance of DB class
                val_error = validate(db).basicChecks(token=input_dict["msgHeader"]["authToken"], loginID = input_dict["msgHeader"]["authLoginID"], 
                                                     checkLogin=True)
                if val_error:
                    output_dict["data"].update({"error":1, "message":val_error})
                    resp.body = json.dumps(output_dict)
                else:
                    kyc = Table("mw_aadhar_kyc_details", schema="mint_loan")
                    clientmaster = Table("mw_finflux_client_master", schema="mint_loan")
                    conf = Table("mw_configuration", schema="mint_loan_admin")
		    conf2 = Table("mw_configuration", schema="mint_loan")
                    cvalues = Table("mw_finflux_attribute_code_values", schema="mint_loan")
                    data = db.runQuery(Query.from_(kyc).select(kyc.CUSTOMER_ID).where(kyc.CUSTOMER_ID==str(input_dict["data"]["customerID"])))
                    baseurl = db.runQuery(Query.from_(conf).select("CONFIG_VALUE").where(conf.CONFIG_KEY=="FINFLUX_URL"))
                    baseurl = baseurl["data"][0]["CONFIG_VALUE"]
		    params = db.runQuery(Query.from_(conf2).select("CONFIG_KEY", "CONFIG_VALUE").where(conf2.CONFIG_KEY.isin(["FinfluxAccessToken"])))
                    params = {ele["CONFIG_KEY"]:ele["CONFIG_VALUE"] for ele in params["data"]}
                    headers = utils.mergeDicts(utils.finflux_headers["CHAITANYA"], {"Authorization":"bearer " + params["FinfluxAccessToken"]})
                    if not data["data"]:
	                utils.logger.debug("Inserting new kyc data\n", extra=logInfo)
                        data = input_dict["data"]
                        insert_dict = {"CUSTOMER_ID":data["customerID"], "AADHAR_NO":data["aadharNo"], "NAME":data["name"],
                                       "DOB":data["dob"], "GENDER":data["gender"], "HOUSE":data["house"], "STREET":data["street"],
                                       "CO":data["careOf"], "LM":data["landMark"], "LC":data["locality"], "VTC":data["villageTownCity"],
                                       "DISTRICT":data["district"], "SUB_DISTRICT":data["subDistrict"], "PIN_CODE":data["pinCode"],
                                       "POST_OFFICE":data["postOffice"], "STATE":data["state"], "COUNTRY":data["country"], 
                                       "CREATED_BY":input_dict["msgHeader"]["authLoginID"], 
                                       "CREATED_DATE":datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
                        junk = db.Insert(db="mint_loan", table="mw_aadhar_kyc_details", compulsory=False, date=False, **insert_dict)
                        junk = db.Update(db="mint_loan", table="mw_aadhar_status", conditions={"CUSTOMER_ID = ":data["customerID"]},
                                         ARCHIVED="Y")
                        utils.logger.debug("Inserting aadhar status\n", extra=logInfo)
                        junk = db.Insert(db="mint_loan", table="mw_aadhar_status", compulsory=False, date=False, 
                                         TRANSACTION_ID=str(random.getrandbits(50)), CUSTOMER_ID=data["customerID"], AADHAR_NO=data["aadharNo"],
                                         ARCHIVED="N", CREATED_BY=input_dict["msgHeader"]["authLoginID"], 
                                         CREATED_DATE=datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                        utils.logger.debug("Updating aadhar data in finflux\n", extra=logInfo)
                        payload = {"documentTypeId": 3, "status": 200, "documentKey": data["aadharNo"]}
                        clientID = Query.from_(clientmaster).select("CLIENT_ID").where(clientmaster.CUSTOMER_ID==str(input_dict["data"]["customerID"]))
                        clientID = db.runQuery(clientID.where(clientmaster.LENDER=='CHAITANYA'))["data"]
                        if clientID:
                            r = requests.post(baseurl + "clients/" + clientID[0]["CLIENT_ID"] + "/identifiers", data=json.dumps(payload), 
                                              headers=headers, verify=False)
                    else:
                        utils.logger.debug("Updating kyc data\n", extra=logInfo)
                        data = input_dict["data"]
                        insert_dict = {"AADHAR_NO":data["aadharNo"], "NAME":data["name"], "DOB":data["dob"], "GENDER":data["gender"],
                                       "HOUSE":data["house"], "STREET":data["street"], "CO":data["careOf"], "LM":data["landMark"],
                                       "LC":data["locality"], "VTC":data["villageTownCity"], "DISTRICT":data["district"],
                                       "SUB_DISTRICT":data["subDistrict"], "PIN_CODE":data["pinCode"], "POST_OFFICE":data["postOffice"],
                                       "STATE":data["state"], "COUNTRY":data["country"], "CREATED_BY":input_dict["msgHeader"]["authLoginID"], 
                                       "CREATED_DATE":datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
                        junk = db.Update(db="mint_loan", table="mw_aadhar_kyc_details", checkAll=False,
                                         conditions={"CUSTOMER_ID=":data["customerID"]}, **insert_dict)
                    utils.logger.debug("Updating dob, gender and name in finflux\n", extra=logInfo)
                    clientID = Query.from_(clientmaster).select("CLIENT_ID").where(clientmaster.CUSTOMER_ID==str(input_dict["data"]["customerID"]))
                    clientID = db.runQuery(clientID)["data"]
                    if clientID:
                        try:
                            dob = datetime.strptime(data["dob"],"%d-%m-%Y").strftime("%d %B %Y")
                        except:
                            dob = None
                        q = Query.from_(cvalues).select(cvalues.VALUE_ID)
                        gender = db.runQuery(q.where(cvalues.VALUE_NAME==("Female" if data["gender"]=='F' else "Male")))
                        genderID = int(gender["data"][0]["VALUE_ID"]) if gender["data"] else None
                        payload = {"genderId": genderID, "dateOfBirth": dob,  "dateFormat": "dd MMMM yyyy", "locale": "en", 
                                   "firstname":" ".join(data["name"].split(" ")[0:-1]) if len(data["name"].split(" "))>1 else data["name"], 
                                   "lastname":data["name"].split(" ")[-1]}
                        r = requests.put(baseurl + "clients/" + clientID[0]["CLIENT_ID"], data=json.dumps(payload), 
                                         headers=headers, verify=False)
                    token = generate(db).AuthToken()
                    if token["updated"]:
                        output_dict["data"].update({"error":0, "message":success})
                        output_dict["msgHeader"]["authToken"] = token["token"]
                    else:
                        output_dict["data"].update({"error":1, "message":errors["token"]})
                resp.body = json.dumps(output_dict)
                utils.logger.debug("Response: " + json.dumps(output_dict["msgHeader"]) + "\n", extra=logInfo)
		#print output_dict
                db._DbClose_()
        except Exception as ex:
            utils.logger.error("ExecutionError: ", extra=logInfo, exc_info=True)
            raise falcon.HTTPError(falcon.HTTP_400,'Invalid JSON', 'The JSON was incorrect.')


